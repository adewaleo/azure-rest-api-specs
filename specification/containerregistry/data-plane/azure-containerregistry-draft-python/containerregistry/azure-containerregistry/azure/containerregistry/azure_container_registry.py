# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.exceptions import HttpOperationError
from .operations.v2_support_operations import V2SupportOperations
from .operations.manifests_operations import ManifestsOperations
from .operations.blob_operations import BlobOperations
from .operations.repository_operations import RepositoryOperations
from .operations.tag_operations import TagOperations
from .operations.refresh_tokens_operations import RefreshTokensOperations
from .operations.access_tokens_operations import AccessTokensOperations
from . import models


class AzureContainerRegistryConfiguration(Configuration):
    """Configuration for AzureContainerRegistry
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param login_uri: Registry login URL
    :type login_uri: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    """

    def __init__(
            self, login_uri, credentials):

        if login_uri is None:
            raise ValueError("Parameter 'login_uri' must not be None.")
        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        base_url = '{url}'

        super(AzureContainerRegistryConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-containerregistry/{}'.format(VERSION))

        self.login_uri = login_uri
        self.credentials = credentials


class AzureContainerRegistry(SDKClient):
    """Metadata API definition for the Azure Container Registry runtime

    :ivar config: Configuration for client.
    :vartype config: AzureContainerRegistryConfiguration

    :ivar v2_support: V2Support operations
    :vartype v2_support: azure.containerregistry.operations.V2SupportOperations
    :ivar manifests: Manifests operations
    :vartype manifests: azure.containerregistry.operations.ManifestsOperations
    :ivar blob: Blob operations
    :vartype blob: azure.containerregistry.operations.BlobOperations
    :ivar repository: Repository operations
    :vartype repository: azure.containerregistry.operations.RepositoryOperations
    :ivar tag: Tag operations
    :vartype tag: azure.containerregistry.operations.TagOperations
    :ivar refresh_tokens: RefreshTokens operations
    :vartype refresh_tokens: azure.containerregistry.operations.RefreshTokensOperations
    :ivar access_tokens: AccessTokens operations
    :vartype access_tokens: azure.containerregistry.operations.AccessTokensOperations

    :param login_uri: Registry login URL
    :type login_uri: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    """

    def __init__(
            self, login_uri, credentials):

        self.config = AzureContainerRegistryConfiguration(login_uri, credentials)
        super(AzureContainerRegistry, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2019-08-15-preview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.v2_support = V2SupportOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.manifests = ManifestsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.blob = BlobOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.repository = RepositoryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.tag = TagOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.refresh_tokens = RefreshTokensOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.access_tokens = AccessTokensOperations(
            self._client, self.config, self._serialize, self._deserialize)
