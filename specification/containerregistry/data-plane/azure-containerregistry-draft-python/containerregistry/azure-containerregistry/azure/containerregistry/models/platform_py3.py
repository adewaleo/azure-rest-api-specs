# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Platform(Model):
    """The platform object describes the platform which the image in the manifest
    runs on. A full list of valid operating system and architecture values are
    listed in the Go language documentation for $GOOS and $GOARCH.

    :param architecture: Specifies the CPU architecture, for example amd64 or
     ppc64le.
    :type architecture: str
    :param os: The os field specifies the operating system, for example linux
     or windows.
    :type os: str
    :param osversion: The optional os.version field specifies the operating
     system version, for example 10.0.10586.
    :type osversion: str
    :param osfeatures: The optional os.features field specifies an array of
     strings, each listing a required OS feature (for example on Windows win32k
    :type osfeatures: list[str]
    :param variant: The optional variant field specifies a variant of the CPU,
     for example armv6l to specify a particular CPU variant of the ARM CPU.
    :type variant: str
    :param features: The optional features field specifies an array of
     strings, each listing a required CPU feature (for example sse4 or aes
    :type features: list[str]
    """

    _attribute_map = {
        'architecture': {'key': 'architecture', 'type': 'str'},
        'os': {'key': 'os', 'type': 'str'},
        'osversion': {'key': 'os\\.version', 'type': 'str'},
        'osfeatures': {'key': 'os\\.features', 'type': '[str]'},
        'variant': {'key': 'variant', 'type': 'str'},
        'features': {'key': 'features', 'type': '[str]'},
    }

    def __init__(self, *, architecture: str=None, os: str=None, osversion: str=None, osfeatures=None, variant: str=None, features=None, **kwargs) -> None:
        super(Platform, self).__init__(**kwargs)
        self.architecture = architecture
        self.os = os
        self.osversion = osversion
        self.osfeatures = osfeatures
        self.variant = variant
        self.features = features
