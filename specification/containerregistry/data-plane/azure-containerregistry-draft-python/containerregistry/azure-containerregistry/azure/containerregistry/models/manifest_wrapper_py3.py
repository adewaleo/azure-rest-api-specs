# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .manifest_py3 import Manifest


class ManifestWrapper(Manifest):
    """Returns the requested manifest file.

    :param schema_version: Schema version
    :type schema_version: int
    :param media_type: Media type for this Manifest
    :type media_type: str
    :param manifests: (ManifestList, OCIIndex) List of V2 image layer
     information
    :type manifests:
     list[~azure.containerregistry.models.ManifestListAttributes]
    :param config: (V2, OCI) Image config descriptor
    :type config: ~azure.containerregistry.models.Descriptor
    :param layers: (V2, OCI) List of V2 image layer information
    :type layers: list[~azure.containerregistry.models.Descriptor]
    :param annotations: (OCI, OCIIndex) Additional metadata
    :type annotations: ~azure.containerregistry.models.Annotations
    :param architecture: (V1) CPU architecture
    :type architecture: str
    :param name: (V1) Image name
    :type name: str
    :param tag: (V1) Image tag
    :type tag: str
    :param fs_layers: (V1) List of layer information
    :type fs_layers: list[~azure.containerregistry.models.FsLayer]
    :param history: (V1) Image history
    :type history: list[~azure.containerregistry.models.History]
    :param signatures: (V1) Image signature
    :type signatures: list[~azure.containerregistry.models.ImageSignature]
    """

    _attribute_map = {
        'schema_version': {'key': 'schemaVersion', 'type': 'int'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'manifests': {'key': 'manifests', 'type': '[ManifestListAttributes]'},
        'config': {'key': 'config', 'type': 'Descriptor'},
        'layers': {'key': 'layers', 'type': '[Descriptor]'},
        'annotations': {'key': 'annotations', 'type': 'Annotations'},
        'architecture': {'key': 'architecture', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'fs_layers': {'key': 'fsLayers', 'type': '[FsLayer]'},
        'history': {'key': 'history', 'type': '[History]'},
        'signatures': {'key': 'signatures', 'type': '[ImageSignature]'},
    }

    def __init__(self, *, schema_version: int=None, media_type: str=None, manifests=None, config=None, layers=None, annotations=None, architecture: str=None, name: str=None, tag: str=None, fs_layers=None, history=None, signatures=None, **kwargs) -> None:
        super(ManifestWrapper, self).__init__(schema_version=schema_version, **kwargs)
        self.media_type = media_type
        self.manifests = manifests
        self.config = config
        self.layers = layers
        self.annotations = annotations
        self.architecture = architecture
        self.name = name
        self.tag = tag
        self.fs_layers = fs_layers
        self.history = history
        self.signatures = signatures
